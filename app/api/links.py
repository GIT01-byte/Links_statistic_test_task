import datetime
import pytz

from fastapi import APIRouter, Body, Query

from db.orm import AsyncOrm
from api.service import extract_domain_with_regex
from api.dependencies import PaginationParamsDep

from models.links import LinksOrm
from schemas.links import LinksCreateRequest


router = APIRouter(
    tags=['Links Statstic']
)


@router.get('/get_links',
            summary='–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏')
async def get_links(pagination: PaginationParamsDep,):
    links = await AsyncOrm.get_all_links(pagination.limit, pagination.offset)
    return {
            "status": 'ok',
            'data': links,
            }

@router.get('/visited_domains',
            summary='–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã')
async def get_visited_domains(pagination: PaginationParamsDep, 
                                time_from: int = Query(...),
                                time_to: int = Query(...),):
    links = await AsyncOrm.get_all_domain_with_timestamp(
        time_from, time_to,
        pagination.limit, pagination.offset,)
    return {
        "status": 'ok',
        'date': links,
        }

@router.post('/links_create',
            summary='–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏',)
async def add_links(request_data: LinksCreateRequest = Body(..., description='–û–±—ä–µ–∫—Ç —Å –º–∞—Å—Å–∏–≤–æ–º —Å—Å—ã–ª–æ–∫')):
    current_time_utc = datetime.datetime.now(pytz.utc).timestamp()
    links = extract_domain_with_regex(request_data.links)
    for link in set(links):
        await AsyncOrm.add_link(LinksOrm(link=link, timestamp=current_time_utc))
    return {
        "status": 'ok',
        "received_links_count": len(request_data.links),
        "links_processed_example": request_data.links,
        "message": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(set(links))} —Å—Å—ã–ª–æ–∫.",
    }

# @router.put('/{task_id}/edit', summary='–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É üìù')
# async def edit_task(
#     task_id: int, 
#     updated_task: TaskUpdateSchema
#     ):
#     task = await TaskRepository.get_by_id(task_id)
#     if task is None:
#         raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
#     task.name = updated_task.name
#     task.description = updated_task.description

#     updated_task = await TaskRepository.update_task(task) 
#     return {'succes': True, 'task': updated_task}

# @router.patch("/{task_id}/complete", response_model=TaskSchema)
# async def complete_task(task_id: int):
#     task = await TaskRepository.get_by_id(task_id)
#     if task is None:
#         raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

#     task.completed = not task.completed
#     updated_task = await TaskRepository.update_task(task)
#     return updated_task

# @router.delete('/{task_id}/delete', summary='–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É üóë')
# async def delete_task(task_id: int):
#     task = await TaskRepository.get_by_id(task_id)
#     if task is None:
#         raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
#     await TaskRepository.delete_task(task_id)
#     return {'succes': True} 

# @router.delete('/delete-many', summary='–£–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á üóë')
# async def delete_tasks(task_ids: List[int] = Query(..., description="–°–ø–∏—Å–æ–∫ ID –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")):
#     for task_id in task_ids:
#         task = await TaskRepository.get_by_id(task_id)
#         if task is None:
#             raise HTTPException(status_code=404, detail=f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞") 

#     await TaskRepository.delete_tasks(task_ids) 
#     return {'success': True, 'deleted_count': len(task_ids)}
