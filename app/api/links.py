import datetime
import re
from typing import Dict, List
import pytz

from fastapi import APIRouter, Body, Query
from db.orm import AsyncOrm

from models.links import LinksOrm
from schemas.links import LinksCreateRequest

def extract_domain_with_regex(urls: list[str]) -> list[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –∏–∑ URL-–∞–¥—Ä–µ—Å–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.
    """
    list_urls = []
    try:
        for url in urls:
            # 1. –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª (http://, https://, ftp://)
            url_no_protocol = re.sub(r'^[a-zA-Z]+://', '', url)
            
            # 2. –£–±–∏—Ä–∞–µ–º –≤—Å–µ, —á—Ç–æ –∏–¥–µ—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ '/' –∏–ª–∏ '?'
            domain_part = re.split(r'[/?:#]', url_no_protocol)[0]
            
            # 3. –£–±–∏—Ä–∞–µ–º –ø–æ—Ä—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            domain = domain_part.split(':')[0]
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—É—Å—Ç–æ–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ 'invalid-url-format'),
            # –ø–æ–ø—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
            if not domain:
                list_urls.append(url) # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª 
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–æ–º–µ–Ω (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫—É –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–∞–º–∏)
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
            if '.' in domain and len(domain) > 2:
                list_urls.append(domain)
            else:
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –¥–æ–º–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª (–∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)
                list_urls.append(url)
            
        return list_urls
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ URL '{url}' —Å –ø–æ–º–æ—â—å—é regex: {e}")
        return list_urls # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ

router = APIRouter(
    tags=['Links Statstic']
)


@router.get('/get_links',
            summary='–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏')
async def get_links():
    links = await AsyncOrm.get_all_links()
    return {'data': links}

@router.get('/visited_domains',
            summary='–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã')
async def get_visited_domains(time_from: int = Query(...), time_to: int = Query(...)):
    links = await AsyncOrm.get_all_domain_with_timestamp(time_from, time_to)
    return {'date': links}

@router.post('/links_create',
            summary='–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏',)
async def add_links(request_data: LinksCreateRequest = Body(..., description='–û–±—ä–µ–∫—Ç —Å –º–∞—Å—Å–∏–≤–æ–º —Å—Å—ã–ª–æ–∫')):
    current_time_utc = datetime.datetime.now(pytz.utc).timestamp()
    links = extract_domain_with_regex(request_data.links)
    for link in set(links):
        await AsyncOrm.add_link(LinksOrm(link=link, timestamp=current_time_utc))
    return {
        "succes": True,
        "received_links_count": len(request_data.links),
        "links_processed_example": request_data.links,
        "status": "success",
        "message": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(set(links))} —Å—Å—ã–ª–æ–∫."
    }

# @router.put('/{task_id}/edit', summary='–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É üìù')
# async def edit_task(
#     task_id: int, 
#     updated_task: TaskUpdateSchema
#     ):
#     task = await TaskRepository.get_by_id(task_id)
#     if task is None:
#         raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
#     task.name = updated_task.name
#     task.description = updated_task.description

#     updated_task = await TaskRepository.update_task(task) 
#     return {'succes': True, 'task': updated_task}

# @router.patch("/{task_id}/complete", response_model=TaskSchema)
# async def complete_task(task_id: int):
#     task = await TaskRepository.get_by_id(task_id)
#     if task is None:
#         raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

#     task.completed = not task.completed
#     updated_task = await TaskRepository.update_task(task)
#     return updated_task

# @router.delete('/{task_id}/delete', summary='–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É üóë')
# async def delete_task(task_id: int):
#     task = await TaskRepository.get_by_id(task_id)
#     if task is None:
#         raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
#     await TaskRepository.delete_task(task_id)
#     return {'succes': True} 

# @router.delete('/delete-many', summary='–£–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á üóë')
# async def delete_tasks(task_ids: List[int] = Query(..., description="–°–ø–∏—Å–æ–∫ ID –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")):
#     for task_id in task_ids:
#         task = await TaskRepository.get_by_id(task_id)
#         if task is None:
#             raise HTTPException(status_code=404, detail=f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞") 

#     await TaskRepository.delete_tasks(task_ids) 
#     return {'success': True, 'deleted_count': len(task_ids)}
